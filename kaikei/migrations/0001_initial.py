# Generated by Django 3.1.2 on 2021-02-16 02:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Buturyou',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名前')),
                ('price', models.IntegerField(verbose_name='価格')),
            ],
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='名前')),
                ('is_waiting', models.BooleanField(default=False, verbose_name='来院中')),
            ],
        ),
        migrations.CreateModel(
            name='Hoken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名前')),
                ('price', models.IntegerField(verbose_name='価格')),
            ],
        ),
        migrations.CreateModel(
            name='Jiseki',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名前')),
                ('price', models.IntegerField(verbose_name='価格')),
            ],
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='支払方法')),
            ],
        ),
        migrations.CreateModel(
            name='Shouhin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='名前')),
                ('price', models.IntegerField(verbose_name='価格')),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('staff_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, verbose_name='名前')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('buturyou', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.buturyou', verbose_name='物療')),
                ('hoken', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.hoken', verbose_name='保険')),
                ('jiseki', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.jiseki', verbose_name='自責')),
                ('shouhin', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.shouhin', verbose_name='商品')),
            ],
        ),
        migrations.CreateModel(
            name='Choice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hoken_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='個数（保険）')),
                ('hoken_total_score', models.IntegerField(verbose_name='小計（保険）')),
                ('jiseki_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='個数（自責）')),
                ('jiseki_total_score', models.IntegerField(verbose_name='小計（自責）')),
                ('buturyou_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='個数（物療）')),
                ('buturyou_total_score', models.IntegerField(verbose_name='小計（物療）')),
                ('shouhin_number', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)], verbose_name='個数（商品）')),
                ('shouhin_total_score', models.IntegerField(verbose_name='小計（商品）')),
                ('total_score', models.IntegerField(verbose_name='合計')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='支払日')),
                ('buturyou', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.buturyou', verbose_name='物療')),
                ('customer', models.ForeignKey(limit_choices_to={'is_waiting': True}, on_delete=django.db.models.deletion.PROTECT, to='kaikei.customer', verbose_name='顧客')),
                ('hoken', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.hoken', verbose_name='保険')),
                ('jiseki', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.jiseki', verbose_name='自責')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.payment', verbose_name='支払方法')),
                ('shouhin', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.shouhin', verbose_name='商品')),
                ('staff', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='kaikei.staff', verbose_name='担当者')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('age', models.IntegerField(null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
